syntax = "proto3";

package credentialsfetcher;

service CredentialsFetcherService {
    rpc AddKerberosLease (CreateKerberosLeaseRequest) returns (CreateKerberosLeaseResponse);
    rpc AddNonDomainJoinedKerberosLease
    (CreateNonDomainJoinedKerberosLeaseRequest)
    returns (CreateNonDomainJoinedKerberosLeaseResponse);
    rpc RenewNonDomainJoinedKerberosLease
    (RenewNonDomainJoinedKerberosLeaseRequest) returns (RenewNonDomainJoinedKerberosLeaseResponse);
    rpc DeleteKerberosLease (DeleteKerberosLeaseRequest) returns (DeleteKerberosLeaseResponse);
    rpc HealthCheck(HealthCheckRequest) returns (HealthCheckResponse);
}

message HealthCheckRequest {
  string service = 1;
}

message HealthCheckResponse {
  string status = 1;
}

message CreateKerberosLeaseRequest {
    repeated string credspec_contents = 1;
}

message CreateKerberosLeaseResponse {
    string lease_id = 1;
    repeated string created_kerberos_file_paths = 2;
}

message CreateNonDomainJoinedKerberosLeaseRequest{
    repeated string credspec_contents = 1;
    string username = 2;
    string password = 3;
    string domain = 4;
}

message CreateNonDomainJoinedKerberosLeaseResponse{
    string lease_id = 1;
    repeated string created_kerberos_file_paths = 2;
}

message RenewNonDomainJoinedKerberosLeaseRequest{
    string username = 1;
    string password = 2;
    string domain = 3;
}

message RenewNonDomainJoinedKerberosLeaseResponse{
    repeated string renewed_kerberos_file_paths = 1;
}


message DeleteKerberosLeaseRequest {
    string lease_id = 1;
}

message DeleteKerberosLeaseResponse {
    string lease_id = 1;
    repeated string deleted_kerberos_file_paths = 2;
}